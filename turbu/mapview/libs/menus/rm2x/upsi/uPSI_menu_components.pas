unit uPSI_menu_components;
{*****************************************************************************
* The contents of this file are used with permission, subject to
* the Mozilla Public License Version 1.1 (the "License"); you may
* not use this file except in compliance with the License. You may
* obtain a copy of the License at
* http://www.mozilla.org/MPL/MPL-1.1.html
*
* Software distributed under the License is distributed on an
* "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
* implied. See the License for the specific language governing
* rights and limitations under the License.
*
*****************************************************************************
*
* This file was created by Mason Wheeler.  He can be reached for support at
* www.turbu-rpg.com.
*****************************************************************************}

{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_rm2X_menu_components = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TGameItemMenu(CL: TPSPascalCompiler);
procedure SIRegister_TCustomPartyPanel(CL: TPSPascalCompiler);
procedure SIRegister_TOnelineCharReadout(CL: TPSPascalCompiler);
procedure SIRegister_TOnelineLabelBox(CL: TPSPascalCompiler);
procedure SIRegister_TCustomOnelineBox(CL: TPSPascalCompiler);
procedure SIRegister_TCustomScrollBox(CL: TPSPascalCompiler);
procedure SIRegister_TGameCashMenu(CL: TPSPascalCompiler);
procedure SIRegister_TRm2kGameMenuBox(CL: TPSPascalCompiler);
procedure SIRegister_rm2X_menu_components(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TGameItemMenu(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomPartyPanel(CL: TPSRuntimeClassImporter);
procedure RIRegister_TOnelineCharReadout(CL: TPSRuntimeClassImporter);
procedure RIRegister_TOnelineLabelBox(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomOnelineBox(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomScrollBox(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGameCashMenu(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRm2kGameMenuBox(CL: TPSRuntimeClassImporter);
procedure RIRegister_rm2X_menu_components(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   windows
  ,chipset_data
  ,frames
  ,menu_basis
  ,LDB
  ,script_backend
  ,rpg_list
  ,asphyreSprite
  ,rm2X_menu_components
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_rm2X_menu_components]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TGameItemMenu(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomScrollBox', 'TGameItemMenu') do
  with CL.AddClassN(CL.FindClass('TCustomScrollBox'),'TGameItemMenu') do
  begin
    RegisterProperty('inventory', 'TRpgInventory', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomPartyPanel(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TRm2kGameMenuBox', 'TCustomPartyPanel') do
  with CL.AddClassN(CL.FindClass('TRm2kGameMenuBox'),'TCustomPartyPanel') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TOnelineCharReadout(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomOnelineBox', 'TOnelineCharReadout') do
  with CL.AddClassN(CL.FindClass('TCustomOnelineBox'),'TOnelineCharReadout') do
  begin
    RegisterProperty('character', 'word', iptw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TOnelineLabelBox(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomOnelineBox', 'TOnelineLabelBox') do
  with CL.AddClassN(CL.FindClass('TCustomOnelineBox'),'TOnelineLabelBox') do
  begin
    RegisterProperty('text', 'string', iptw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomOnelineBox(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TSystemFrame', 'TCustomOnelineBox') do
  with CL.AddClassN(CL.FindClass('TSystemFrame'),'TCustomOnelineBox') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomScrollBox(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TRm2kGameMenuBox', 'TCustomScrollBox') do
  with CL.AddClassN(CL.FindClass('TRm2kGameMenuBox'),'TCustomScrollBox') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGameCashMenu(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TSystemFrame', 'TGameCashMenu') do
  with CL.AddClassN(CL.FindClass('TSystemFrame'),'TGameCashMenu') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRm2kGameMenuBox(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TGameMenuBox', 'TRm2kGameMenuBox') do
  with CL.AddClassN(CL.FindClass('TGameMenuBox'),'TRm2kGameMenuBox') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_rm2X_menu_components(CL: TPSPascalCompiler);
begin
  SIRegister_TRm2kGameMenuBox(CL);
  SIRegister_TGameCashMenu(CL);
  SIRegister_TCustomScrollBox(CL);
  SIRegister_TCustomOnelineBox(CL);
  SIRegister_TOnelineLabelBox(CL);
  SIRegister_TOnelineCharReadout(CL);
  SIRegister_TCustomPartyPanel(CL);
  SIRegister_TGameItemMenu(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TGameItemMenuinventory_W(Self: TGameItemMenu; const T: TRpgInventory);
begin Self.inventory := T; end;

(*----------------------------------------------------------------------------*)
procedure TGameItemMenuinventory_R(Self: TGameItemMenu; var T: TRpgInventory);
begin T := Self.inventory; end;

(*----------------------------------------------------------------------------*)
procedure TOnelineCharReadoutcharacter_W(Self: TOnelineCharReadout; const T: word);
begin Self.character := T; end;

(*----------------------------------------------------------------------------*)
procedure TOnelineLabelBoxtext_W(Self: TOnelineLabelBox; const T: string);
begin Self.text := T; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGameItemMenu(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGameItemMenu) do
  begin
    RegisterPropertyHelper(@TGameItemMenuinventory_R,@TGameItemMenuinventory_W,'inventory');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomPartyPanel(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomPartyPanel) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TOnelineCharReadout(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TOnelineCharReadout) do
  begin
    RegisterPropertyHelper(nil,@TOnelineCharReadoutcharacter_W,'character');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TOnelineLabelBox(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TOnelineLabelBox) do
  begin
    RegisterPropertyHelper(nil,@TOnelineLabelBoxtext_W,'text');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomOnelineBox(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomOnelineBox) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomScrollBox(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomScrollBox) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGameCashMenu(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGameCashMenu) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRm2kGameMenuBox(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRm2kGameMenuBox) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_rm2X_menu_components(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TRm2kGameMenuBox(CL);
  RIRegister_TGameCashMenu(CL);
  RIRegister_TCustomScrollBox(CL);
  RIRegister_TCustomOnelineBox(CL);
  RIRegister_TOnelineLabelBox(CL);
  RIRegister_TOnelineCharReadout(CL);
  RIRegister_TCustomPartyPanel(CL);
  RIRegister_TGameItemMenu(CL);
end;



{ TPSImport_rm2X_menu_components }
(*----------------------------------------------------------------------------*)
procedure TPSImport_rm2X_menu_components.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_rm2X_menu_components(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_rm2X_menu_components.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_rm2X_menu_components(ri);
end;
(*----------------------------------------------------------------------------*)


end.
