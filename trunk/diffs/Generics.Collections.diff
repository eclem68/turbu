--- C:\Program Files\CodeGear\RAD Studio\6.0\source\Win32\rtl\common\Generics.Collections.pas	2009-01-03 11:23:38.000000000 -0800
+++ C:\Documents and Settings\Owner\Desktop\turbu\vclpatch\Generics.Collections.pas	2009-01-18 20:30:20.000000000 -0800
@@ -439,30 +439,30 @@
     raise EArgumentOutOfRangeException.CreateRes(@sArgumentOutOfRange);
   if Count = 0 then
   begin
     FoundIndex := 0;
     Exit(False);
   end;
-  
+
+  Result := False;
   L := Index;
   H := Index + Count - 1;
   while L <= H do
   begin
     mid := L + (H - L) shr 1;
     cmp := Comparer.Compare(Values[mid], Item);
     if cmp < 0 then
       L := mid + 1
-    else if cmp = 0 then
+    else
     begin
-      FoundIndex := L;
-      Exit(True);
+      H := mid - 1;
+      if cmp = 0 then
+        Result := True;
     end;
-    H := mid - 1;
   end;
   FoundIndex := L;
-  Result := False;
 end;
 
 class function TArray.BinarySearch<T>(const Values: array of T; const Item: T;
   out FoundIndex: Integer; const Comparer: IComparer<T>): Boolean;
 begin
   Result := BinarySearch<T>(Values, Item, FoundIndex, Comparer,
@@ -1590,13 +1590,13 @@
   Result.Key := FDictionary.FItems[FIndex].Key;
   Result.Value := FDictionary.FItems[FIndex].Value;
 end;
 
 function TDictionary<TKey,TValue>.TPairEnumerator.MoveNext: Boolean;
 begin
-  while FIndex < Length(FDictionary.FItems) do
+  while FIndex < High(FDictionary.FItems) do
   begin
     Inc(FIndex);
     if FDictionary.FItems[FIndex].HashCode <> 0 then
       Exit(True);
   end;
   Result := False;
@@ -1625,13 +1625,13 @@
 begin
   Result := FDictionary.FItems[FIndex].Key;
 end;
 
 function TDictionary<TKey,TValue>.TKeyEnumerator.MoveNext: Boolean;
 begin
-  while FIndex < Length(FDictionary.FItems) do
+  while FIndex < High(FDictionary.FItems) do
   begin
     Inc(FIndex);
     if FDictionary.FItems[FIndex].HashCode <> 0 then
       Exit(True);
   end;
   Result := False;
@@ -1660,26 +1660,26 @@
 begin
   Result := FDictionary.FItems[FIndex].Value;
 end;
 
 function TDictionary<TKey,TValue>.TValueEnumerator.MoveNext: Boolean;
 begin
-  while FIndex < Length(FDictionary.FItems) do
+  while FIndex < High(FDictionary.FItems) do
   begin
     Inc(FIndex);
     if FDictionary.FItems[FIndex].HashCode <> 0 then
       Exit(True);
   end;
   Result := False;
 end;
 
 { TObjectList<T> }
 
 constructor TObjectList<T>.Create(AOwnsObjects: Boolean);
 begin
-  inherited;
+  inherited Create;
   FOwnsObjects := AOwnsObjects;
 end;
 
 constructor TObjectList<T>.Create(const AComparer: IComparer<T>; AOwnsObjects: Boolean);
 begin
   inherited Create(AComparer);
