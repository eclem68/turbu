unit uPSI_script_interface;
{*****************************************************************************
* The contents of this file are used with permission, subject to
* the Mozilla Public License Version 1.1 (the "License"); you may
* not use this file except in compliance with the License. You may
* obtain a copy of the License at
* http://www.mozilla.org/MPL/MPL-1.1.html
*
* Software distributed under the License is distributed on an
* "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
* implied. See the License for the specific language governing
* rights and limitations under the License.
*
*****************************************************************************
*
* This file was created by Mason Wheeler.  He can be reached for support at
* www.turbu-rpg.com.
*****************************************************************************}

{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis.
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface

uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;

{ compile-time registration functions }
procedure SIRegister_TScriptInterface(CL: TPSPascalCompiler);
procedure SIRegister_TRpgCharacter(CL: TPSPascalCompiler);
procedure SIRegister_TRpgImage(CL: TPSPascalCompiler);
procedure SIRegister_TRpgTimer(CL: TPSPascalCompiler);
procedure SIRegister_TRpgEvent(CL: TPSPascalCompiler);
procedure SIRegister_TRpgParty(CL: TPSPascalCompiler);
procedure SIRegister_TRpgHero(CL: TPSPascalCompiler);
procedure SIRegister_TRpgVehicle(CL: TPSPascalCompiler);
procedure SIRegister_TRpgMediaPlayer(CL: TPSPascalCompiler);
procedure SIRegister_TRpgItem(CL: TPSPascalCompiler);
procedure SIRegister_script_interface(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TScriptInterface(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRpgCharacter(CL: TPSRuntimeClassImporter);
//procedure RIRegister_TRpgImage(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRpgTimer(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRpgEvent(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRpgParty(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRpgHero(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRpgMediaPlayer(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRpgVehicle(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRpgItem(CL: TPSRuntimeClassImporter);
procedure RIRegister_script_interface(CL: TPSRuntimeClassImporter);

implementation


uses
   rpg_list, script_interface, charset_data, turbu_heroes, turbu_mapchars {, rpg_image};

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TScriptInterface(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TScriptInterface') do
  with CL.AddClassN(CL.FindClass('TObject'),'TScriptInterface') do
  begin
    RegisterProperty('variable', 'integer word', iptrw);
    RegisterProperty('switch', 'boolean word', iptrw);
    RegisterProperty('hero', 'TRpgHero word', iptrw);
    RegisterProperty('image', 'TRpgImage byte', iptrw);
    RegisterProperty('event', 'TRpgEvent word', iptr);
//    RegisterProperty('vehicle', 'TRpgVehicle TVehicleSet', iptr);
    RegisterProperty('party', 'TRpgParty', iptr);
    RegisterProperty('money', 'integer', iptrw);
    RegisterProperty('partySize', 'byte', iptr);
    RegisterProperty('saveCount', 'word', iptr);
    RegisterProperty('battles', 'word', iptr);
    RegisterProperty('victories', 'word', iptr);
    RegisterProperty('losses', 'word', iptr);
    RegisterProperty('flees', 'word', iptr);
    RegisterProperty('timer', 'TRpgTimer', iptrw);
    RegisterProperty('timer2', 'TRpgTimer', iptrw);
    RegisterProperty('BGM', 'TRpgMediaPlayer', iptr);
    RegisterProperty('levelGainNotify', 'boolean', iptw);
    RegisterProperty('deathPossible', 'boolean', iptw);
    RegisterProperty('menuEnabled', 'boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRpgCharacter(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TRpgCharacter') do
  with CL.AddClassN(CL.FindClass('TObject'),'TRpgCharacter') do
  begin
    RegisterProperty('screenX', 'integer', iptr);
    RegisterProperty('screenY', 'integer', iptr);
    RegisterProperty('translucency', 'byte', iptrw);
    RegisterMethod('procedure flash( r, g, b, power : byte; time : cardinal; wait : boolean);');
    RegisterMethod('procedure move(frequency: byte; skip: boolean; route: word);');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRpgImage(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TSprite', 'TRpgImage') do
  with CL.AddClassN(CL.FindClass('TObject'),'TRpgImage') do
  begin
    RegisterMethod('procedure applyImageColors(r, g, b, sat: byte);');
    RegisterMethod('procedure applyImageEffect(which: TImageEffects; power: byte);');
    RegisterMethod('procedure moveTo(x, y: integer; zoom, opacity: word);');
    RegisterMethod('procedure erase;');
    RegisterProperty('zoom', 'word', iptrw);
    RegisterProperty('timer', 'cardinal', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRpgItem(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TRpgItem') do
  with CL.AddClassN(CL.FindClass('TObject'),'TRpgItem') do
  begin
    RegisterMethod('Function newItem( const item, quantity : word) : TRpgItem');
    RegisterMethod('Function usableBy( hero : word) : boolean');
    RegisterProperty('quantity', 'byte', iptrw);
    RegisterProperty('usesLeft', 'smallint', iptrw);
    RegisterProperty('name', 'string', iptr);
    RegisterProperty('id', 'word', iptr);
    RegisterProperty('desc', 'string', iptr);
    RegisterProperty('cost', 'word', iptr);
    RegisterProperty('usableOnField', 'boolean', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRpgList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObjectList', 'TRpgList') do
  with CL.AddClassN(CL.FindClass('TObjectList'),'TRpgInventory') do
  begin
    RegisterMethod('Procedure Add( const id, number : word);');
    RegisterMethod('Procedure addItem( const value : TRpgItem);');
    RegisterMethod('Function contains( id : word) : boolean');
    RegisterMethod('Procedure Remove( const id, number : word)');
    RegisterProperty('items', 'TRpgItem word', iptrw);
    SetDefaultPropery('items');
    registerProperty('count', 'integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRpgVehicle(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TRpgCharacter', 'TRpgVehicle') do
  with CL.AddClassN(CL.FindClass('TRpgCharacter'),'TRpgVehicle') do
  begin
    RegisterMethod('procedure setSprite(filename: string; index: byte);');
    RegisterMethod('function inUse: boolean');
    RegisterProperty('sprite', 'string', iptr);
    RegisterProperty('spriteIndex', 'byte', iptr);
    RegisterProperty('map', 'smallint', iptr);
    RegisterProperty('x', 'word', iptr);
    RegisterProperty('y', 'word', iptr);
    RegisterProperty('facing', 'byte', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRpgTimer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TRpgTimer') do
  with CL.AddClassN(CL.FindClass('TObject'),'TRpgTimer') do
  begin
    RegisterMethod('Procedure go;');
    RegisterMethod('Procedure start( const visible, inBattle : boolean);');
    RegisterMethod('Procedure pause');
    RegisterMethod('Procedure reset');
    RegisterProperty('time', 'integer', iptrw);
    RegisterProperty('visible', 'boolean', iptrw);
    RegisterProperty('inBattle', 'boolean', iptrw);
    RegisterProperty('active', 'boolean', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRpgEvent(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TRpgCharacter', 'TRpgEvent') do
  with CL.AddClassN(CL.FindClass('TRpgCharacter'),'TRpgEvent') do
  begin
    RegisterProperty('map', 'word', iptr);
    RegisterProperty('x', 'word', iptr);
    RegisterProperty('y', 'word', iptr);
    RegisterProperty('facing', 'byte', iptr);
    RegisterProperty('id', 'word', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRpgParty(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TRpgCharacter', 'TRpgParty') do
  with CL.AddClassN(CL.FindClass('TRpgCharacter'),'TRpgParty') do
  begin
    RegisterMethod('Procedure addItem( const id, number : word)');
    RegisterMethod('Procedure removeItem( const id, number : word)');
    RegisterMethod('Procedure addExp( const id : smallint; number : integer)');
    RegisterMethod('Procedure removeExp( const id : smallint; number : integer)');
    RegisterMethod('Procedure addLevels( const id : smallint; number : byte)');
    RegisterMethod('Procedure removeLevels( const id : smallint; number : byte)');
    RegisterMethod('function takeDamage( power: word; defense, mDefense, variance: byte): word;');
    RegisterProperty('facing', 'byte', iptrw);
    RegisterProperty('money', 'integer', iptrw);
    RegisterProperty('inventory', 'TRpgInventory', iptrw);
    RegisterProperty('hero', 'TRpgHero byte', iptr);
    SetDefaultPropery('hero');
    RegisterProperty('levelNotify', 'boolean', iptrw);
    registerProperty('x', 'word', iptrw);
    registerProperty('y', 'word', iptrw);
    registerProperty('map', 'word', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRpgHero(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TRpgHero') do
  with CL.AddClassN(CL.FindClass('TObject'),'TRpgHero') do
  begin
    RegisterMethod('Procedure equip( id : word)');
    RegisterMethod('Procedure unequip( id : TSlotList)');
    RegisterMethod('Procedure fullheal');
    RegisterMethod('function inParty: boolean');
    RegisterMethod('function equipped(id: word): boolean;');
    RegisterMethod('function takeDamage( power: word; defense, mDefense, variance: byte): word;');
    RegisterMethod('procedure setSprite( filename: string; index: byte; translucent: boolean)');
    RegisterMethod('procedure setPortrait( filename: string; index: byte);');
    RegisterProperty('name', 'string', iptrw);
    RegisterProperty('charClass', 'string', iptrw);
    RegisterProperty('level', 'byte', iptrw);
    RegisterProperty('exp', 'longint', iptrw);
    RegisterProperty('hp', 'integer', iptrw);
    RegisterProperty('mp', 'integer', iptrw);
    RegisterProperty('maxHp', 'integer', iptrw);
    RegisterProperty('maxMp', 'integer', iptrw);
    RegisterProperty('stat', 'smallint byte', iptrw);
    RegisterProperty('attack', 'smallint', iptrw);
    RegisterProperty('defense', 'smallint', iptrw);
    RegisterProperty('mind', 'smallint', iptrw);
    RegisterProperty('agility', 'smallint', iptrw);
    RegisterProperty('equipment', 'word byte', iptr);
    RegisterProperty('skill', 'boolean word', iptrw);
    RegisterProperty('condition', 'boolean word', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRpgMediaPlayer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TRpgMediaPlayer') do
  with CL.AddClassN(CL.FindClass('TObject'),'TRpgMediaPlayer') do
  begin
    RegisterMethod('Procedure play(filename : string)');
    RegisterProperty('position', 'integer', iptr);
    RegisterProperty('looped', 'boolean', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_script_interface(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TImageEffects', '( ie_none, ie_rotate, ie_wave )');

  SIRegister_TRpgMediaPlayer(CL);
  SIRegister_TRpgImage(CL);
  SIRegister_TRpgItem(CL);
  SIRegister_TRpgList(CL);
  SIRegister_TRpgHero(CL);
  SIRegister_TRpgCharacter(CL);
  SIRegister_TRpgParty(CL);
  SIRegister_TRpgEvent(CL);
  SIRegister_TRpgTimer(CL);
  SIRegister_TRpgVehicle(CL);
  SIRegister_TScriptInterface(CL);
end;

{PROPERTY HELPERS}
{$REGION PROPERTY HELPERS}
(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TScriptInterfaceMenuEnabled_R(Self: TScriptInterface; var T: boolean);
begin T := Self.menuEnabled; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfaceMenuEnabled_W(Self: TScriptInterface; const T: boolean);
begin Self.menuEnabled := T; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfacedeathPossible_W(Self: TScriptInterface; const T: boolean);
begin Self.deathPossible := T; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfaceBGM_R(Self: TScriptInterface; var T: TRpgMediaPlayer);
begin T := Self.BGM; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfaceLevelGainNotify_W(Self: TScriptInterface; const T: boolean);
begin Self.levelGainNotify := T; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfacetimer_W(Self: TScriptInterface; const T: TRpgTimer);
begin Self.timer := T; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfacetimer_R(Self: TScriptInterface; var T: TRpgTimer);
begin T := Self.timer; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfacetimer2_W(Self: TScriptInterface; const T: TRpgTimer);
begin Self.timer2 := T; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfacetimer2_R(Self: TScriptInterface; var T: TRpgTimer);
begin T := Self.timer2; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfaceflees_R(Self: TScriptInterface; var T: word);
begin T := Self.flees; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfacelosses_R(Self: TScriptInterface; var T: word);
begin T := Self.losses; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfacevictories_R(Self: TScriptInterface; var T: word);
begin T := Self.victories; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfacebattles_R(Self: TScriptInterface; var T: word);
begin T := Self.battles; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfacesaveCount_R(Self: TScriptInterface; var T: word);
begin T := Self.saveCount; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfacepartySize_R(Self: TScriptInterface; var T: byte);
begin T := Self.partySize; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfacemoney_R(Self: TScriptInterface; var T: integer);
begin T := Self.money; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfacemoney_W(Self: TScriptInterface; const T: integer);
begin Self.money := T; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfaceparty_R(Self: TScriptInterface; var T: TRpgParty);
begin T := Self.party; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfacevehicle_R(Self: TScriptInterface; var T: TRpgVehicle; const t1: TVehicleSet);
begin T := Self.vehicle[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfaceevent_R(Self: TScriptInterface; var T: TRpgEvent; const t1: word);
begin T := Self.event[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfacehero_R(Self: TScriptInterface; var T: TRpgHero; const t1: word);
begin T := Self.hero[t1]; end;

{(*----------------------------------------------------------------------------*)
procedure TScriptInterfaceImage_R(Self: TScriptInterface; var T: TRpgImage; const t1: byte);
begin T := Self.image[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfaceImage_W(Self: TScriptInterface; const T: TRpgImage; const t1: byte);
begin Self.image[t1] := T; end;}

(*----------------------------------------------------------------------------*)
procedure TScriptInterfaceswitch_W(Self: TScriptInterface; const T: boolean; const t1: word);
begin Self.switch[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfaceswitch_R(Self: TScriptInterface; var T: boolean; const t1: word);
begin T := Self.switch[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfacevariable_W(Self: TScriptInterface; const T: integer; const t1: word);
begin Self.variable[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TScriptInterfacevariable_R(Self: TScriptInterface; var T: integer; const t1: word);
begin T := Self.variable[t1]; end;

{(*----------------------------------------------------------------------------*)
procedure TRpgImagetimer_W(Self: TRpgImage; const T: cardinal);
begin Self.timer := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgImagetimer_R(Self: TRpgImage; var T: cardinal);
begin T := Self.timer; end;

(*----------------------------------------------------------------------------*)
procedure TRpgImageZoom_W(Self: TRpgImage; const T: word);
begin Self.zoom := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgImagezoom_R(Self: TRpgImage; var T: word);
begin T := Self.zoom; end;}

(*----------------------------------------------------------------------------*)
procedure TRpgItemusesLeft_W(Self: TRpgItem; const T: smallint);
begin Self.usesLeft := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgItemusesLeft_R(Self: TRpgItem; var T: smallint);
begin T := Self.usesLeft; end;

(*----------------------------------------------------------------------------*)
procedure TRpgItemquantity_W(Self: TRpgItem; const T: byte);
begin Self.quantity := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgItemquantity_R(Self: TRpgItem; var T: byte);
begin T := Self.quantity; end;

(*----------------------------------------------------------------------------*)
procedure TRpgItemname_R(Self: TRpgItem; var T: string);
begin T := Self.name; end;

(*----------------------------------------------------------------------------*)
procedure TRpgItemusableOnField_R(Self: TRpgItem; var T: boolean);
begin T := Self.usableOnField; end;

(*----------------------------------------------------------------------------*)
procedure TRpgItemdesc_R(Self: TRpgItem; var T: string);
begin T := Self.desc; end;

(*----------------------------------------------------------------------------*)
procedure TRpgItemid_R(Self: TRpgItem; var T: word);
begin T := Self.id; end;

(*----------------------------------------------------------------------------*)
procedure TRpgItemCost_R(Self: TRpgItem; var T: word);
begin T := Self.cost; end;

(*----------------------------------------------------------------------------*)
Procedure TRpgListaddItem_P(Self: TRpgInventory;  const value : TRpgItem);
Begin Self.Add(value); END;

(*----------------------------------------------------------------------------*)
Procedure TRpgListAdd_P(Self: TRpgInventory;  const id, number : word);
Begin Self.Add(id, number); END;

(*----------------------------------------------------------------------------*)
procedure TRpgListItem_W(Self: TRpgInventory; const T: TRpgItem; const t1: word);
begin Self[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgListItem_R(Self: TRpgInventory; var T: TRpgItem; const t1: word);
begin T := Self[t1] as TRpgItem; end;

(*----------------------------------------------------------------------------*)
procedure TRpgListCount_R(Self: TRpgInventory; var T: integer);
begin T := Self.count; end;

(*----------------------------------------------------------------------------*)
procedure TRpgVehicley_R(Self: TRpgVehicle; var T: word);
begin T := Self.y; end;

(*----------------------------------------------------------------------------*)
procedure TRpgVehiclex_R(Self: TRpgVehicle; var T: word);
begin T := Self.x; end;

(*----------------------------------------------------------------------------*)
procedure TRpgVehiclemap_R(Self: TRpgVehicle; var T: smallint);
begin T := Self.map; end;

(*----------------------------------------------------------------------------*)
procedure TRpgVehiclespriteIndex_R(Self: TRpgVehicle; var T: byte);
begin T := Self.spriteIndex; end;

(*----------------------------------------------------------------------------*)
procedure TRpgVehiclesprite_R(Self: TRpgVehicle; var T: string);
begin T := Self.sprite; end;

(*----------------------------------------------------------------------------*)
procedure TRpgVehicleFacing_R(Self: TRpgVehicle; var T: byte);
begin T := Self.facing; end;

(*----------------------------------------------------------------------------*)
procedure TRpgTimeractive_R(Self: TRpgTimer; var T: boolean);
begin T := Self.active; end;

(*----------------------------------------------------------------------------*)
procedure TRpgTimerinBattle_W(Self: TRpgTimer; const T: boolean);
begin Self.inBattle := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgTimerinBattle_R(Self: TRpgTimer; var T: boolean);
begin T := Self.inBattle; end;

(*----------------------------------------------------------------------------*)
procedure TRpgTimervisible_W(Self: TRpgTimer; const T: boolean);
begin Self.visible := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgTimervisible_R(Self: TRpgTimer; var T: boolean);
begin T := Self.visible; end;

(*----------------------------------------------------------------------------*)
procedure TRpgTimertime_W(Self: TRpgTimer; const T: integer);
begin Self.time := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgTimertime_R(Self: TRpgTimer; var T: integer);
begin T := Self.time; end;

(*----------------------------------------------------------------------------*)
Procedure TRpgTimerstart_P(Self: TRpgTimer;  const visible, inBattle : boolean);
Begin Self.start(visible, inBattle); END;

(*----------------------------------------------------------------------------*)
Procedure TRpgTimergo_P(Self: TRpgTimer);
Begin Self.start; END;

(*----------------------------------------------------------------------------*)
procedure TRpgEventid_R(Self: TRpgEvent; var T: word);
begin T := Self.id; end;

(*----------------------------------------------------------------------------*)
procedure TRpgCharacterScreenY_R(Self: TRpgCharacter; var T: integer);
begin T := Self.screenY; end;

(*----------------------------------------------------------------------------*)
procedure TRpgCharacterScreenX_R(Self: TRpgCharacter; var T: integer);
begin T := Self.screenX; end;

(*----------------------------------------------------------------------------*)
procedure TRpgCharacterTranslucency_R(Self: TRpgCharacter; var T: byte);
begin T := Self.translucency; end;

(*----------------------------------------------------------------------------*)
procedure TRpgCharacterTranslucency_W(Self: TRpgCharacter; const T: byte);
begin Self.translucency := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgEventfacing_R(Self: TRpgEvent; var T: byte);
begin T := Self.facing; end;

(*----------------------------------------------------------------------------*)
procedure TRpgEventy_R(Self: TRpgEvent; var T: word);
begin T := Self.y; end;

(*----------------------------------------------------------------------------*)
procedure TRpgEventx_R(Self: TRpgEvent; var T: word);
begin T := Self.x; end;

(*----------------------------------------------------------------------------*)
procedure TRpgEventmap_R(Self: TRpgEvent; var T: word);
begin T := Self.map; end;

(*----------------------------------------------------------------------------*)
procedure TRpgPartyFacing_R(Self: TRpgParty; var T: byte);
begin T := Self.facing; end;

(*----------------------------------------------------------------------------*)
procedure TRpgPartyFacing_W(Self: TRpgParty; const T: byte);
begin Self.facing := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgPartylevelNotify_R(Self: TRpgParty; var T: boolean);
begin T := Self.levelNotify; end;

(*----------------------------------------------------------------------------*)
procedure TRpgPartylevelNotify_W(Self: TRpgParty; const T: boolean);
begin Self.levelNotify := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgPartyhero_W(Self: TRpgParty; const T: TRpgHero; const t1: byte);
begin Self.hero[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgPartyhero_R(Self: TRpgParty; var T: TRpgHero; const t1: byte);
begin T := Self.hero[t1]; end;

{(*----------------------------------------------------------------------------*)
procedure TRpgPartyinventory_W(Self: TRpgParty; const T: TRpgInventory);
begin Self.inventory := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgPartyinventory_R(Self: TRpgParty; var T: TRpgInventory);
begin T := Self.inventory; end; }

(*----------------------------------------------------------------------------*)
procedure TRpgPartymoney_W(Self: TRpgParty; const T: integer);
begin Self.money := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgPartymoney_R(Self: TRpgParty; var T: integer);
begin T := Self.money; end;

(*----------------------------------------------------------------------------*)
procedure TRpgPartyX_W(Self: TRpgParty; const T: word);
begin Self.x := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgPartyX_R(Self: TRpgParty; var T: word);
begin T := Self.x; end;

(*----------------------------------------------------------------------------*)
procedure TRpgPartyY_W(Self: TRpgParty; const T: word);
begin Self.y := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgPartyY_R(Self: TRpgParty; var T: word);
begin T := Self.y; end;

(*----------------------------------------------------------------------------*)
procedure TRpgPartyMap_R(Self: TRpgParty; var T: word);
begin T := Self.map; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHerocondition_W(Self: TRpgHero; const T: boolean; const t1: word);
begin Self.condition[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHerocondition_R(Self: TRpgHero; var T: boolean; const t1: word);
begin T := Self.condition[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeroequipment_R(Self: TRpgHero; var T: word; const t1: byte);
begin T := Self.equipment[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeroagility_W(Self: TRpgHero; const T: smallint);
begin Self.agility := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeroagility_R(Self: TRpgHero; var T: smallint);
begin T := Self.agility; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeromind_W(Self: TRpgHero; const T: smallint);
begin Self.mind := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeromind_R(Self: TRpgHero; var T: smallint);
begin T := Self.mind; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHerodefense_W(Self: TRpgHero; const T: smallint);
begin Self.defense := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHerodefense_R(Self: TRpgHero; var T: smallint);
begin T := Self.defense; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeroattack_W(Self: TRpgHero; const T: smallint);
begin Self.attack := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeroattack_R(Self: TRpgHero; var T: smallint);
begin T := Self.attack; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHerostat_W(Self: TRpgHero; const T: smallint; const t1: integer);
begin Self.stat[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHerostat_R(Self: TRpgHero; var T: smallint; const t1: integer);
begin T := Self.stat[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeromaxMp_W(Self: TRpgHero; const T: integer);
begin Self.maxMp := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeromaxMp_R(Self: TRpgHero; var T: integer);
begin T := Self.maxMp; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeromaxHp_W(Self: TRpgHero; const T: integer);
begin Self.maxHp := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeromaxHp_R(Self: TRpgHero; var T: integer);
begin T := Self.maxHp; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeromp_W(Self: TRpgHero; const T: integer);
begin Self.mp := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeromp_R(Self: TRpgHero; var T: integer);
begin T := Self.mp; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHerohp_W(Self: TRpgHero; const T: integer);
begin Self.hp := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHerohp_R(Self: TRpgHero; var T: integer);
begin T := Self.hp; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeroexp_W(Self: TRpgHero; const T: longint);
begin Self.exp := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeroexp_R(Self: TRpgHero; var T: longint);
begin T := Self.exp; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHerolevel_W(Self: TRpgHero; const T: byte);
begin Self.level := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHerolevel_R(Self: TRpgHero; var T: byte);
begin T := Self.level; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHerocharClass_W(Self: TRpgHero; const T: string);
begin Self.charClass := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHerocharClass_R(Self: TRpgHero; var T: string);
begin T := Self.charClass; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeroname_W(Self: TRpgHero; const T: string);
begin Self.name := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeroname_R(Self: TRpgHero; var T: string);
begin T := Self.name; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeroskill_W(Self: TRpgHero; const T: boolean; const t1: word);
begin Self.skill[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TRpgHeroskill_R(Self: TRpgHero; var T: boolean; const t1: word);
begin T := Self.skill[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TRpgMediaPlayerposition_R(Self: TRpgMediaPlayer; var T: integer);
begin T := Self.position; end;

(*----------------------------------------------------------------------------*)
procedure TRpgMediaPlayerlooped_R(Self: TRpgMediaPlayer; var T: boolean);
begin T := Self.looped; end;

{$ENDREGION}

(*----------------------------------------------------------------------------*)
procedure RIRegister_TScriptInterface(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TScriptInterface) do
  begin
    RegisterPropertyHelper(@TScriptInterfacevariable_R,@TScriptInterfacevariable_W,'variable');
    RegisterPropertyHelper(@TScriptInterfaceswitch_R,@TScriptInterfaceswitch_W,'switch');
    RegisterPropertyHelper(@TScriptInterfacehero_R,nil,'hero');
    RegisterPropertyHelper(@TScriptInterfaceevent_R,nil,'event');
    RegisterPropertyHelper(@TScriptInterfacevehicle_R,nil,'vehicle');
    RegisterPropertyHelper(@TScriptInterfaceparty_R,nil,'party');
    RegisterPropertyHelper(@TScriptInterfacemoney_R,@TScriptInterfacemoney_W,'money');
//    RegisterPropertyHelper(@TScriptInterfaceImage_R,@TScriptInterfaceImage_W,'image');
    RegisterPropertyHelper(@TScriptInterfacepartySize_R,nil,'partySize');
    RegisterPropertyHelper(@TScriptInterfacesaveCount_R,nil,'saveCount');
    RegisterPropertyHelper(@TScriptInterfacebattles_R,nil,'battles');
    RegisterPropertyHelper(@TScriptInterfacevictories_R,nil,'victories');
    RegisterPropertyHelper(@TScriptInterfacelosses_R,nil,'losses');
    RegisterPropertyHelper(@TScriptInterfaceflees_R,nil,'flees');
    RegisterPropertyHelper(@TScriptInterfacetimer_R,@TScriptInterfacetimer_W,'timer');
    RegisterPropertyHelper(@TScriptInterfacetimer2_R,@TScriptInterfacetimer2_W,'timer2');
    RegisterPropertyHelper(@TScriptInterfaceBGM_R,nil,'BGM');
    RegisterPropertyHelper(nil,@TScriptInterfaceLevelGainNotify_w, 'levelGainNotify');
    RegisterPropertyHelper(nil,@TScriptInterfacedeathPossible_W,'deathPossible');
    RegisterPropertyHelper(@TScriptInterfaceMenuEnabled_R, @TScriptInterfaceMenuEnabled_W, 'menuEnabled');
  end;
end;

{(*----------------------------------------------------------------------------*)
procedure RIRegister_TRpgImage(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRpgImage) do
  begin
    RegisterMethod(@TRpgImage.applyImageColors, 'applyImageColors');
    RegisterMethod(@TRpgImage.applyImageEffect, 'applyImageEffect');
    RegisterMethod(@TRpgImage.moveTo, 'moveTo');
    RegisterMethod(@TRpgImage.Dead, 'erase');
    RegisterPropertyHelper(@TRpgImagezoom_R,@TRpgImagezoom_W,'zoom');
    RegisterPropertyHelper(@TRpgImagetimer_R,@TRpgImagetimer_W,'timer');
  end;
end;}

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRpgTimer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRpgTimer) do
  begin
    RegisterMethod(@TRpgTimergo_P, 'go');
    RegisterMethod(@TRpgTimerstart_P, 'start');
    RegisterMethod(@TRpgTimer.pause, 'pause');
    RegisterMethod(@TRpgTimer.reset, 'reset');
    RegisterMethod(@TRpgTimer.tick, 'tick');
    RegisterPropertyHelper(@TRpgTimertime_R,@TRpgTimertime_W,'time');
    RegisterPropertyHelper(@TRpgTimervisible_R,@TRpgTimervisible_W,'visible');
    RegisterPropertyHelper(@TRpgTimerinBattle_R,@TRpgTimerinBattle_W,'inBattle');
    RegisterPropertyHelper(@TRpgTimeractive_R,nil,'active');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRpgEvent(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRpgEvent) do
  begin
    RegisterPropertyHelper(@TRpgEventmap_R,nil,'map');
    RegisterPropertyHelper(@TRpgEventx_R,nil,'x');
    RegisterPropertyHelper(@TRpgEventy_R,nil,'y');
    RegisterPropertyHelper(@TRpgEventfacing_R,nil,'facing');
    RegisterPropertyHelper(@TRpgEventid_R,nil,'id');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRpgCharacter(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRpgCharacter) do
  begin
    RegisterPropertyHelper(@TRpgCharacterScreenX_R,nil,'screenX');
    RegisterPropertyHelper(@TRpgCharacterScreenY_R,nil,'screenY');
    RegisterPropertyHelper(@TRpgCharacterTranslucency_R, @TRpgCharacterTranslucency_W, 'translucency');
    RegisterMethod(@TRpgCharacter.flash, 'flash');
    RegisterMethod(@TRpgCharacter.move, 'move');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRpgHero(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRpgHero) do
  begin
    RegisterMethod(@TRpgHero.equip, 'equip');
    RegisterMethod(@TRpgHero.unequip, 'UNEQUIP');
    RegisterMethod(@TRpgHero.fullheal, 'FULLHEAL');
    RegisterMethod(@TRpgHero.takeDamage, 'TAKEDAMAGE');
    RegisterMethod(@TRpgHero.setSprite, 'SETSPRITE');
    RegisterMethod(@TRpgHero.setPortrait, 'SETPORTRAIT');
    RegisterMethod(@TRpgHero.inParty, 'INPARTY');
    RegisterMethod(@TRpgHero.equipped, 'EQUIPPED');
    RegisterPropertyHelper(@TRpgHeroname_R,@TRpgHeroname_W,'name');
    RegisterPropertyHelper(@TRpgHerocharClass_R,@TRpgHerocharClass_W,'charClass');
    RegisterPropertyHelper(@TRpgHerolevel_R,@TRpgHerolevel_W,'level');
    RegisterPropertyHelper(@TRpgHeroattack_R,@TRpgHeroattack_W,'attack');
    RegisterPropertyHelper(@TRpgHerodefense_R,@TRpgHerodefense_W,'defense');
    RegisterPropertyHelper(@TRpgHeromind_R,@TRpgHeromind_W,'mind');
    RegisterPropertyHelper(@TRpgHeroagility_R,@TRpgHeroagility_W,'agility');
    RegisterPropertyHelper(@TRpgHeroexp_R,@TRpgHeroexp_W,'exp');
    RegisterPropertyHelper(@TRpgHerohp_R,@TRpgHerohp_W,'hp');
    RegisterPropertyHelper(@TRpgHeromp_R,@TRpgHeromp_W,'mp');
    RegisterPropertyHelper(@TRpgHeromaxHp_R,@TRpgHeromaxHp_W,'maxHp');
    RegisterPropertyHelper(@TRpgHeromaxMp_R,@TRpgHeromaxMp_W,'maxMp');
    RegisterPropertyHelper(@TRpgHerostat_R,@TRpgHerostat_W,'stat');
    RegisterPropertyHelper(@TRpgHeroequipment_R,nil,'equipment');
    RegisterPropertyHelper(@TRpgHeroskill_R,@TRpgHeroskill_W,'skill');
    RegisterPropertyHelper(@TRpgHerocondition_R,@TRpgHerocondition_W,'condition');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRpgParty(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRpgParty) do
  begin
    RegisterConstructor(@TRpgParty.Create, 'Create');
    RegisterMethod(@TRpgParty.addItem, 'addItem');
    RegisterMethod(@TRpgParty.removeItem, 'removeItem');
    RegisterMethod(@TRpgParty.addExp, 'addExp');
    RegisterMethod(@TRpgParty.removeExp, 'removeExp');
    RegisterMethod(@TRpgParty.addLevels, 'addLevels');
    RegisterMethod(@TRpgParty.removeLevels, 'removeLevels');
    RegisterMethod(@TRpgParty.takeDamage, 'TAKEDAMAGE');
    RegisterPropertyHelper(@TRpgPartyX_R,@TRpgPartyX_W,'x');
    RegisterPropertyHelper(@TRpgPartyY_R,@TRpgPartyY_W,'y');
    RegisterPropertyHelper(@TRpgPartyMap_R,nil,'map');
    RegisterPropertyHelper(@TRpgPartymoney_R,@TRpgPartymoney_W,'money');
    RegisterPropertyHelper(@TRpgPartyFacing_R,@TRpgPartyFacing_W,'facing');
//    RegisterPropertyHelper(@TRpgPartyinventory_R,@TRpgPartyinventory_W,'inventory');
    RegisterPropertyHelper(@TRpgPartyhero_R,@TRpgPartyhero_W,'hero');
    RegisterPropertyHelper(@TRpgPartylevelNotify_R,@TRpgPartylevelNotify_W,'levelNotify');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRpgMediaPlayer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRpgMediaPlayer) do
  begin
    RegisterMethod(@TRpgMediaPlayer.playMusic, 'play');
    RegisterPropertyHelper(@TRpgMediaPlayerposition_R,nil,'position');
    RegisterPropertyHelper(@TRpgMediaPlayerlooped_R,nil,'looped');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRpgItem(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRpgItem) do
  begin
    RegisterMethod(@TRpgItem.newItem, 'newItem');
    RegisterVirtualAbstractMethod(TRpgItem, @TRpgItem.usableBy, 'usableBy');
    RegisterPropertyHelper(@TRpgItemquantity_R,@TRpgItemquantity_W,'quantity');
    RegisterPropertyHelper(@TRpgItemusesLeft_R,@TRpgItemusesLeft_W,'usesLeft');
    RegisterPropertyHelper(@TRpgItemid_R,nil,'id');
    RegisterPropertyHelper(@TRpgItemdesc_R,nil,'desc');
    RegisterPropertyHelper(@TRpgItemname_R,nil,'name');
    RegisterPropertyHelper(@TRpgItemCost_R,nil,'cost');
    RegisterPropertyHelper(@TRpgItemusableOnField_R,nil,'usableOnField');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRpgList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRpgInventory) do
  begin
    RegisterMethod(@TRpgListAdd_P, 'Add');
    RegisterMethod(@TRpgListaddItem_P, 'addItem');
    RegisterMethod(@TRpgInventory.contains, 'contains');
    RegisterMethod(@TRpgInventory.Remove, 'Remove');
    RegisterPropertyHelper(@TRpgListItem_R, @TRpgListItem_W, 'items');
    RegisterPropertyHelper(@TRpgListCount_R, nil, 'count');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRpgVehicle(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRpgVehicle) do
  begin
    RegisterMethod(@TRpgVehicle.setSprite, 'setSprite');
    RegisterMethod(@TRpgVehicle.inuse, 'inuse');
    RegisterPropertyHelper(@TRpgVehiclesprite_R,nil,'sprite');
    RegisterPropertyHelper(@TRpgVehiclespriteIndex_R,nil,'spriteIndex');
    RegisterPropertyHelper(@TRpgVehiclemap_R,nil,'map');
    RegisterPropertyHelper(@TRpgVehiclex_R,nil,'x');
    RegisterPropertyHelper(@TRpgVehicley_R,nil,'y');
    RegisterPropertyHelper(@TRpgVehicleFacing_R,nil,'facing');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_script_interface(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TRpgMediaPlayer(CL);
  RIRegister_TRpgCharacter(CL);
//  RIRegister_TRpgImage(CL);
  RIRegister_TRpgItem(CL);
  RIRegister_TRpgList(CL);
  RIRegister_TRpgHero(CL);
  RIRegister_TRpgParty(CL);
  RIRegister_TRpgEvent(CL);
  RIRegister_TRpgTimer(CL);
  RIRegister_TRpgVehicle(CL);
  RIRegister_TScriptInterface(CL);
end;

end.
