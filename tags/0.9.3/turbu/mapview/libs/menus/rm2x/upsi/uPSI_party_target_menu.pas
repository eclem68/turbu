unit uPSI_party_target_menu;
{*****************************************************************************
* The contents of this file are used with permission, subject to
* the Mozilla Public License Version 1.1 (the "License"); you may
* not use this file except in compliance with the License. You may
* obtain a copy of the License at
* http://www.mozilla.org/MPL/MPL-1.1.html
*
* Software distributed under the License is distributed on an
* "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
* implied. See the License for the specific language governing
* rights and limitations under the License.
*
*****************************************************************************
*
* This file was created by Mason Wheeler.  He can be reached for support at
* www.turbu-rpg.com.
*****************************************************************************}

{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_rm2x_party_target_menu = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TPartyTargetPage(CL: TPSPascalCompiler);
procedure SIRegister_TGameMiniPartyPanel(CL: TPSPascalCompiler);
procedure SIRegister_TQuantityBox(CL: TPSPascalCompiler);
procedure SIRegister_rm2x_party_target_menu(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TPartyTargetPage(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGameMiniPartyPanel(CL: TPSRuntimeClassImporter);
procedure RIRegister_TQuantityBox(CL: TPSRuntimeClassImporter);
procedure RIRegister_rm2x_party_target_menu(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   windows
  ,frames
  ,chipset_data
  ,rpg_list
  ,skill_code
  ,rm2x_main_menu
  ,rm2x_menu_components
  ,menu_basis
  ,rm2x_party_target_menu
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_rm2x_party_target_menu]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TPartyTargetPage(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMenuPage', 'TPartyTargetPage') do
  with CL.AddClassN(CL.FindClass('TMenuPage'),'TPartyTargetPage') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGameMiniPartyPanel(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomPartyPanel', 'TGameMiniPartyPanel') do
  with CL.AddClassN(CL.FindClass('TCustomPartyPanel'),'TGameMiniPartyPanel') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TQuantityBox(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TSystemFrame', 'TQuantityBox') do
  with CL.AddClassN(CL.FindClass('TSystemFrame'),'TQuantityBox') do
  begin
    RegisterProperty('item', 'TRpgItem', iptw);
    RegisterProperty('skill', 'TRpgSkill', iptw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_rm2x_party_target_menu(CL: TPSPascalCompiler);
begin
  SIRegister_TQuantityBox(CL);
  SIRegister_TGameMiniPartyPanel(CL);
  SIRegister_TPartyTargetPage(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TQuantityBoxskill_W(Self: TQuantityBox; const T: TRpgSkill);
begin Self.skill := T; end;

(*----------------------------------------------------------------------------*)
procedure TQuantityBoxitem_W(Self: TQuantityBox; const T: TRpgItem);
begin Self.item := T; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPartyTargetPage(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPartyTargetPage) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGameMiniPartyPanel(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGameMiniPartyPanel) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TQuantityBox(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TQuantityBox) do
  begin
    RegisterPropertyHelper(nil,@TQuantityBoxitem_W,'item');
    RegisterPropertyHelper(nil,@TQuantityBoxskill_W,'skill');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_rm2x_party_target_menu(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TQuantityBox(CL);
  RIRegister_TGameMiniPartyPanel(CL);
  RIRegister_TPartyTargetPage(CL);
end;

 
 
{ TPSImport_rm2x_party_target_menu }
(*----------------------------------------------------------------------------*)
procedure TPSImport_rm2x_party_target_menu.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_rm2x_party_target_menu(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_rm2x_party_target_menu.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_rm2x_party_target_menu(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
