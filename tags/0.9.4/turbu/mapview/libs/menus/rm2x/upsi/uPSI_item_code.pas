unit uPSI_item_code;
{*****************************************************************************
* The contents of this file are used with permission, subject to
* the Mozilla Public License Version 1.1 (the "License"); you may
* not use this file except in compliance with the License. You may
* obtain a copy of the License at
* http://www.mozilla.org/MPL/MPL-1.1.html
*
* Software distributed under the License is distributed on an
* "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
* implied. See the License for the specific language governing
* rights and limitations under the License.
*
*****************************************************************************
*
* This file was created by Mason Wheeler.  He can be reached for support at
* www.turbu-rpg.com.
*****************************************************************************}

{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_item_code = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TSwitchItem(CL: TPSPascalCompiler);
procedure SIRegister_TSkillItem(CL: TPSPascalCompiler);
procedure SIRegister_TStatItem(CL: TPSPascalCompiler);
procedure SIRegister_TBookItem(CL: TPSPascalCompiler);
procedure SIRegister_TRecoveryItem(CL: TPSPascalCompiler);
procedure SIRegister_TAppliedItem(CL: TPSPascalCompiler);
procedure SIRegister_TRelic(CL: TPSPascalCompiler);
procedure SIRegister_THelmet(CL: TPSPascalCompiler);
procedure SIRegister_TArmor(CL: TPSPascalCompiler);
procedure SIRegister_TShield(CL: TPSPascalCompiler);
procedure SIRegister_TWeapon(CL: TPSPascalCompiler);
procedure SIRegister_TEquipment(CL: TPSPascalCompiler);
procedure SIRegister_TJunkItem(CL: TPSPascalCompiler);
procedure SIRegister_item_code(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TSwitchItem(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSkillItem(CL: TPSRuntimeClassImporter);
procedure RIRegister_TStatItem(CL: TPSRuntimeClassImporter);
procedure RIRegister_TBookItem(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRecoveryItem(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAppliedItem(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRelic(CL: TPSRuntimeClassImporter);
procedure RIRegister_THelmet(CL: TPSRuntimeClassImporter);
procedure RIRegister_TArmor(CL: TPSRuntimeClassImporter);
procedure RIRegister_TShield(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWeapon(CL: TPSRuntimeClassImporter);
procedure RIRegister_TEquipment(CL: TPSRuntimeClassImporter);
procedure RIRegister_TJunkItem(CL: TPSRuntimeClassImporter);
procedure RIRegister_item_code(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   rpg_list
  ,hero_data
  ,script_engine
  ,script_backend
  ,chipset_graphics
  ,chipset_data
  ,skill_code
  ,item_code
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_item_code]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TSwitchItem(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TRpgItem', 'TSwitchItem') do
  with CL.AddClassN(CL.FindClass('TRpgItem'),'TSwitchItem') do
  begin
    RegisterMethod('Procedure use');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSkillItem(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TAppliedItem', 'TSkillItem') do
  with CL.AddClassN(CL.FindClass('TAppliedItem'),'TSkillItem') do
  begin
    RegisterProperty('skill', 'TRpgSkill', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TStatItem(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TAppliedItem', 'TStatItem') do
  with CL.AddClassN(CL.FindClass('TAppliedItem'),'TStatItem') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TBookItem(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TAppliedItem', 'TBookItem') do
  with CL.AddClassN(CL.FindClass('TAppliedItem'),'TBookItem') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRecoveryItem(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TAppliedItem', 'TRecoveryItem') do
  with CL.AddClassN(CL.FindClass('TAppliedItem'),'TRecoveryItem') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAppliedItem(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TRpgItem', 'TAppliedItem') do
  with CL.AddClassN(CL.FindClass('TRpgItem'),'TAppliedItem') do
  begin
    RegisterMethod('Function usableArea : boolean');
    RegisterMethod('Function areaItem : boolean');
    RegisterMethod('Procedure use( target : TRpgHero)');
    RegisterMethod('Procedure useArea');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRelic(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TEquipment', 'TRelic') do
  with CL.AddClassN(CL.FindClass('TEquipment'),'TRelic') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_THelmet(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TEquipment', 'THelmet') do
  with CL.AddClassN(CL.FindClass('TEquipment'),'THelmet') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TArmor(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TEquipment', 'TArmor') do
  with CL.AddClassN(CL.FindClass('TEquipment'),'TArmor') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TShield(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TEquipment', 'TShield') do
  with CL.AddClassN(CL.FindClass('TEquipment'),'TShield') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWeapon(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TEquipment', 'TWeapon') do
  with CL.AddClassN(CL.FindClass('TEquipment'),'TWeapon') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TEquipment(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TRpgItem', 'TEquipment') do
  with CL.AddClassN(CL.FindClass('TRpgItem'),'TEquipment') do
  begin
    RegisterProperty('attack', 'smallint', iptr);
    RegisterProperty('defense', 'smallint', iptr);
    RegisterProperty('speed', 'smallint', iptr);
    RegisterProperty('mind', 'smallint', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TJunkItem(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TRpgItem', 'TJunkItem') do
  with CL.AddClassN(CL.FindClass('TRpgItem'),'TJunkItem') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_item_code(CL: TPSPascalCompiler);
begin
  SIRegister_TJunkItem(CL);
  SIRegister_TEquipment(CL);
  SIRegister_TWeapon(CL);
  SIRegister_TShield(CL);
  SIRegister_TArmor(CL);
  SIRegister_THelmet(CL);
  SIRegister_TRelic(CL);
  SIRegister_TAppliedItem(CL);
  SIRegister_TRecoveryItem(CL);
  SIRegister_TBookItem(CL);
  SIRegister_TStatItem(CL);
  SIRegister_TSkillItem(CL);
  SIRegister_TSwitchItem(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TSkillItemskill_R(Self: TSkillItem; var T: TRpgSkill);
begin T := Self.skill; end;

(*----------------------------------------------------------------------------*)
procedure TEquipmentmind_R(Self: TEquipment; var T: smallint);
begin T := Self.mind; end;

(*----------------------------------------------------------------------------*)
procedure TEquipmentspeed_R(Self: TEquipment; var T: smallint);
begin T := Self.speed; end;

(*----------------------------------------------------------------------------*)
procedure TEquipmentdefense_R(Self: TEquipment; var T: smallint);
begin T := Self.defense; end;

(*----------------------------------------------------------------------------*)
procedure TEquipmentattack_R(Self: TEquipment; var T: smallint);
begin T := Self.attack; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSwitchItem(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSwitchItem) do
  begin
    RegisterMethod(@TSwitchItem.use, 'use');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSkillItem(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSkillItem) do
  begin
    RegisterPropertyHelper(@TSkillItemskill_R,nil,'skill');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TStatItem(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TStatItem) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TBookItem(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TBookItem) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRecoveryItem(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRecoveryItem) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAppliedItem(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAppliedItem) do
  begin
    RegisterMethod(@TAppliedItem.usableArea, 'usableArea');
    RegisterVirtualMethod(@TAppliedItem.areaItem, 'areaItem');
    RegisterVirtualMethod(@TAppliedItem.use, 'use');
    RegisterMethod(@TAppliedItem.useArea, 'useArea');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRelic(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRelic) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_THelmet(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(THelmet) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TArmor(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TArmor) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TShield(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TShield) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWeapon(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWeapon) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TEquipment(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TEquipment) do
  begin
    RegisterPropertyHelper(@TEquipmentattack_R,nil,'attack');
    RegisterPropertyHelper(@TEquipmentdefense_R,nil,'defense');
    RegisterPropertyHelper(@TEquipmentspeed_R,nil,'speed');
    RegisterPropertyHelper(@TEquipmentmind_R,nil,'mind');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TJunkItem(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TJunkItem) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_item_code(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TJunkItem(CL);
  RIRegister_TEquipment(CL);
  RIRegister_TWeapon(CL);
  RIRegister_TShield(CL);
  RIRegister_TArmor(CL);
  RIRegister_THelmet(CL);
  RIRegister_TRelic(CL);
  RIRegister_TAppliedItem(CL);
  RIRegister_TRecoveryItem(CL);
  RIRegister_TBookItem(CL);
  RIRegister_TStatItem(CL);
  RIRegister_TSkillItem(CL);
  RIRegister_TSwitchItem(CL);
end;

 
 
{ TPSImport_item_code }
(*----------------------------------------------------------------------------*)
procedure TPSImport_item_code.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_item_code(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_item_code.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_item_code(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
