unit uPSI_menus;
{*****************************************************************************
* The contents of this file are used with permission, subject to
* the Mozilla Public License Version 1.1 (the "License"); you may
* not use this file except in compliance with the License. You may
* obtain a copy of the License at
* http://www.mozilla.org/MPL/MPL-1.1.html
*
* Software distributed under the License is distributed on an
* "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
* implied. See the License for the specific language governing
* rights and limitations under the License.
*
*****************************************************************************
*
* This file was created by Mason Wheeler.  He can be reached for support at
* www.turbu-rpg.com.
*****************************************************************************}

{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_menu_basis = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TMenuEngine(CL: TPSPascalCompiler);
procedure SIRegister_TMenuScriptEngine(CL: TPSPascalCompiler);
procedure SIRegister_TMenuPage(CL: TPSPascalCompiler);
procedure SIRegister_TGameMenuBox(CL: TPSPascalCompiler);
procedure SIRegister_menu_basis(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TMenuEngine(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMenuScriptEngine(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMenuPage(CL: TPSRuntimeClassImporter);
procedure RIRegister_TGameMenuBox(CL: TPSRuntimeClassImporter);
procedure RIRegister_menu_basis(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   windows
  ,contnrs
  ,syncObjs
  ,commons
  ,chipset_data
  ,frames
  ,menu_basis
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_menu_basis]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TMenuEngine(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TMenuEngine') do
  with CL.AddClassN(CL.FindClass('TObject'),'TMenuEngine') do
  begin
    RegisterMethod('Procedure focusMenu( sender, which : TMenuPage)');
    RegisterMethod('Procedure return');
    RegisterMethod('Procedure placeCursor( value : smallint)');
    RegisterMethod('Procedure leave( const playSound : boolean)');
    RegisterMethod('Procedure button( const input : TButtonCode)');
    RegisterProperty('visible', 'boolean', iptrw);
    RegisterProperty('currentMenu', 'TMenuPage', iptr);
    RegisterProperty('cursor', 'TAnimSysFrame', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMenuScriptEngine(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TMenuScriptEngine') do
  with CL.AddClassN(CL.FindClass('TObject'),'TMenuScriptEngine') do
  begin
    RegisterProperty('compiler', 'TPSPascalCompiler', iptr);
    RegisterProperty('parent', 'TMenuEngine', iptr);
    RegisterProperty('script', 'string', iptw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMenuPage(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TMenuPage') do
  with CL.AddClassN(CL.FindClass('TObject'),'TMenuPage') do
  begin
    RegisterMethod('Procedure focusMenu( referrer, which : TGameMenuBox)');
    RegisterMethod('Procedure focusPage( which : TMenuPage)');
    RegisterMethod('Procedure backTo( which : TGameMenuBox)');
    RegisterMethod('Procedure Draw');
    RegisterMethod('Procedure placeCursor( value : smallint)');
    RegisterMethod('Procedure setup( value : integer)');
    RegisterMethod('Procedure move');
    RegisterProperty('currentMenu', 'TGameMenuBox', iptr);
    RegisterProperty('visible', 'boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TGameMenuBox(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomMessageBox', 'TGameMenuBox') do
  with CL.AddClassN(CL.FindClass('TCustomMessageBox'),'TGameMenuBox') do
  begin
    RegisterMethod('Procedure setup( value : integer)');
    RegisterMethod('Procedure focusPage( which : TMenuPage)');
    RegisterMethod('procedure focusMenu(which: TGameMenuBox);');
    RegisterProperty('cursorPosition', 'smallint', iptr);
    RegisterProperty('parent', 'TMenuEngine', iptr);
    RegisterProperty('optionEnabled', 'boolean word', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_menu_basis(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TMenuState', '( ms_off, ms_main, ms_fading )');
  CL.AddTypeS('TMenuScripts', '( msc_button, msc_cursor )');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TGameMenuBox');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TMenuEngine');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TMenuPage');
  CL.AddTypeS('TButtonFunc', 'Procedure ( which : TButtonCode; theMenu : TGameM'
   +'enuBox; parent : TMenuPage)');
  CL.AddTypeS('TCursorFunc', 'Procedure ( position : smallint; theMenu : TGameM'
   +'enuBox; parent : TMenuPage)');
  SIRegister_TGameMenuBox(CL);
  SIRegister_TMenuPage(CL);
  SIRegister_TMenuScriptEngine(CL);
  SIRegister_TMenuEngine(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TMenuEnginecursor_R(Self: TMenuEngine; var T: TAnimSysFrame);
begin T := Self.cursor; end;

(*----------------------------------------------------------------------------*)
procedure TMenuEnginecurrentMenu_R(Self: TMenuEngine; var T: TMenuPage);
begin T := Self.currentMenu; end;

(*----------------------------------------------------------------------------*)
procedure TMenuEnginevisible_W(Self: TMenuEngine; const T: boolean);
begin Self.visible := T; end;

(*----------------------------------------------------------------------------*)
procedure TMenuEnginevisible_R(Self: TMenuEngine; var T: boolean);
begin T := Self.visible; end;

(*----------------------------------------------------------------------------*)
procedure TMenuScriptEnginescript_W(Self: TMenuScriptEngine; const T: string);
begin Self.script := T; end;

(*----------------------------------------------------------------------------*)
procedure TMenuScriptEngineparent_R(Self: TMenuScriptEngine; var T: TMenuEngine);
begin T := Self.parent; end;

(*----------------------------------------------------------------------------*)
procedure TMenuScriptEnginecompiler_R(Self: TMenuScriptEngine; var T: TPSPascalCompiler);
begin T := Self.compiler; end;

(*----------------------------------------------------------------------------*)
procedure TMenuPagevisible_W(Self: TMenuPage; const T: boolean);
begin Self.visible := T; end;

(*----------------------------------------------------------------------------*)
procedure TMenuPagevisible_R(Self: TMenuPage; var T: boolean);
begin T := Self.visible; end;

(*----------------------------------------------------------------------------*)
procedure TMenuPagecurrentMenu_R(Self: TMenuPage; var T: TGameMenuBox);
begin T := Self.currentMenu; end;

(*----------------------------------------------------------------------------*)
procedure TGameMenuBoxparent_R(Self: TGameMenuBox; var T: TMenuEngine);
begin T := Self.parent; end;

(*----------------------------------------------------------------------------*)
procedure TGameMenuBoxcursorPosition_R(Self: TGameMenuBox; var T: smallint);
begin T := Self.cursorPosition; end;

(*----------------------------------------------------------------------------*)
procedure TGameMenuBoxOptionEnabled_R(Self: TGameMenuBox; var T: Boolean; const t1: word);
begin T := Self.optionEnabled[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TGameMenuBoxOptionEnabled_W(Self: TGameMenuBox; const T: Boolean; const t1: word);
begin Self.optionEnabled[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMenuEngine(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMenuEngine) do
  begin
    RegisterMethod(@TMenuEngine.focusMenu, 'focusMenu');
    RegisterMethod(@TMenuEngine.return, 'return');
    RegisterMethod(@TMenuEngine.placeCursor, 'placeCursor');
    RegisterMethod(@TMenuEngine.leave, 'leave');
    RegisterMethod(@TMenuEngine.button, 'button');
    RegisterPropertyHelper(@TMenuEnginevisible_R,@TMenuEnginevisible_W,'visible');
    RegisterPropertyHelper(@TMenuEnginecurrentMenu_R,nil,'currentMenu');
    RegisterPropertyHelper(@TMenuEnginecursor_R,nil,'cursor');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMenuScriptEngine(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMenuScriptEngine) do
  begin
    RegisterPropertyHelper(@TMenuScriptEnginecompiler_R,nil,'compiler');
    RegisterPropertyHelper(@TMenuScriptEngineparent_R,nil,'parent');
    RegisterPropertyHelper(nil,@TMenuScriptEnginescript_W,'script');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMenuPage(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMenuPage) do
  begin
    RegisterMethod(@TMenuPage.focusMenu, 'focusMenu');
    RegisterMethod(@TMenuPage.focusPage, 'focusPage');
    RegisterMethod(@TMenuPage.backTo, 'backTo');
    RegisterVirtualMethod(@TMenuPage.Draw, 'Draw');
    RegisterVirtualMethod(@TMenuPage.placeCursor, 'placeCursor');
    RegisterVirtualMethod(@TMenuPage.setup, 'setup');
    RegisterVirtualMethod(@TMenuPage.move, 'move');
    RegisterPropertyHelper(@TMenuPagecurrentMenu_R,nil,'currentMenu');
    RegisterPropertyHelper(@TMenuPagevisible_R,@TMenuPagevisible_W,'visible');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TGameMenuBox(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGameMenuBox) do
  begin
    RegisterMethod(@TGameMenuBox.setup, 'setup');
    RegisterMethod(@TGameMenuBox.focusPage, 'focusPage');
    registerMethod(@TGameMenuBox.focusMenu, 'focusMenu');
    RegisterPropertyHelper(@TGameMenuBoxcursorPosition_R,nil,'cursorPosition');
    RegisterPropertyHelper(@TGameMenuBoxparent_R,nil,'parent');
    RegisterPropertyHelper(@TGameMenuBoxOptionEnabled_R,@TGameMenuBoxOptionEnabled_W,'optionEnabled');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_menu_basis(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGameMenuBox) do
  with CL.Add(TMenuEngine) do
  with CL.Add(TMenuPage) do
  RIRegister_TGameMenuBox(CL);
  RIRegister_TMenuPage(CL);
  RIRegister_TMenuScriptEngine(CL);
  RIRegister_TMenuEngine(CL);
end;

 
 
{ TPSImport_menu_basis }
(*----------------------------------------------------------------------------*)
procedure TPSImport_menu_basis.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_menu_basis(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_menu_basis.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_menu_basis(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
